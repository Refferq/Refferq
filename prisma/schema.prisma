generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  name           String
  password       String
  profilePicture String?      @map("profile_picture")
  role           Role         @default(AFFILIATE)
  status         UserStatus   @default(PENDING)
  lastLogin      DateTime?    @map("last_login")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  affiliate      Affiliate?
  auditLogs      AuditLog[]
  commissions    Commission[]
  payouts        Payout[]

  @@map("users")
}

model Affiliate {
  id            String       @id @default(cuid())
  userId        String       @unique @map("user_id")
  referralCode  String       @unique @map("referral_code")
  payoutDetails Json         @default("{}") @map("payout_details")
  balanceCents  Int          @default(0) @map("balance_cents")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissions   Commission[]
  conversions   Conversion[]
  referrals     Referral[]

  @@map("affiliates")
}

model Referral {
  id             String          @id @default(cuid())
  affiliateId    String          @map("affiliate_id")
  leadName       String          @map("lead_name")
  leadEmail      String          @map("lead_email")
  leadPhone      String?         @map("lead_phone")
  subscriptionId String?         @map("subscription_id")
  status         ReferralStatus  @default(PENDING)
  notes          String?
  metadata       Json            @default("{}")
  reviewedBy     String?         @map("reviewed_by")
  reviewedAt     DateTime?       @map("reviewed_at")
  reviewNotes    String?         @map("review_notes")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  conversions    Conversion[]
  clicks         ReferralClick[]
  affiliate      Affiliate       @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  @@map("referrals")
}

model ReferralClick {
  id         String   @id @default(cuid())
  referralId String   @map("referral_id")
  ipAddress  String   @map("ip_address")
  userAgent  String?  @map("user_agent")
  referer    String?
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now()) @map("created_at")
  referral   Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)

  @@map("referral_clicks")
}

model Conversion {
  id            String           @id @default(cuid())
  affiliateId   String           @map("affiliate_id")
  referralId    String?          @map("referral_id")
  eventType     ConversionType   @map("event_type")
  amountCents   Int              @map("amount_cents")
  currency      String           @default("USD")
  status        ConversionStatus @default(PENDING)
  eventMetadata Json             @default("{}") @map("event_metadata")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  commissions   Commission[]
  affiliate     Affiliate        @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  referral      Referral?        @relation(fields: [referralId], references: [id])

  @@map("conversions")
}

model Commission {
  id           String           @id @default(cuid())
  conversionId String           @map("conversion_id")
  affiliateId  String           @map("affiliate_id")
  userId       String           @map("user_id")
  amountCents  Int              @map("amount_cents")
  rate         Float
  status       CommissionStatus @default(PENDING)
  approvedBy   String?          @map("approved_by")
  approvedAt   DateTime?        @map("approved_at")
  paidAt       DateTime?        @map("paid_at")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  affiliate    Affiliate        @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  conversion   Conversion       @relation(fields: [conversionId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  payout       Payout?

  @@map("commissions")
}

model Payout {
  id                    String       @id @default(cuid())
  userId                String       @map("user_id")
  commissionId          String       @unique @map("commission_id")
  amountCents           Int          @map("amount_cents")
  method                PayoutMethod
  status                PayoutStatus @default(PENDING)
  details               Json         @default("{}")
  commissionPeriodStart DateTime?    @map("commission_period_start")
  commissionPeriodEnd   DateTime?    @map("commission_period_end")
  processedAt           DateTime?    @map("processed_at")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")
  commission            Commission   @relation(fields: [commissionId], references: [id], onDelete: Cascade)
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payouts")
}

model CommissionRule {
  id         String             @id @default(cuid())
  name       String
  type       CommissionRuleType
  value      Float
  conditions Json               @default("{}")
  isDefault  Boolean            @default(false) @map("is_default")
  isActive   Boolean            @default(true) @map("is_active")
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt @map("updated_at")

  @@map("commission_rules")
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String   @map("actor_id")
  action     String
  objectType String   @map("object_type")
  objectId   String   @map("object_id")
  payload    Json     @default("{}")
  createdAt  DateTime @default(now()) @map("created_at")
  actor      User     @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model OTP {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime @map("expires_at")
  isUsed    Boolean  @default(false) @map("is_used")
  attempts  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email])
  @@index([code])
  @@map("otps")
}

model ProgramSettings {
  id                        String   @id @default(cuid())
  programId                 String   @unique @map("program_id")
  productName               String   @map("product_name")
  programName               String   @map("program_name")
  websiteUrl                String   @map("website_url")
  currency                  String   @default("INR")
  blockedCountries          Json     @default("[]") @map("blocked_countries")
  portalSubdomain           String   @map("portal_subdomain")
  termsOfService            String?  @map("terms_of_service")
  minimumPayoutThreshold    Int      @default(0) @map("minimum_payout_threshold")
  payoutTerm                String   @default("NET-15") @map("payout_term")
  payoutMethods             Json     @default("[\"PAYPAL\"]") @map("payout_methods")
  brandBackgroundColor      String   @default("#000000") @map("brand_background_color")
  brandButtonColor          String   @default("#000000") @map("brand_button_color")
  brandTextColor            String   @default("#ffffff") @map("brand_text_color")
  companyLogo               String?  @map("company_logo")
  favicon                   String?
  cookieDuration            Int      @default(30) @map("cookie_duration")
  urlParameters             Json     @default("[]") @map("url_parameters")
  hideCustomerEmails        Boolean  @default(true) @map("hide_customer_emails")
  disablePersonalizedLinks  Boolean  @default(false) @map("disable_personalized_links")
  blockKeywords             Json     @default("[]") @map("block_keywords")
  blockSocialMediaAds       Json     @default("[]") @map("block_social_media_ads")
  allowManualLeadSubmission Boolean  @default(false) @map("allow_manual_lead_submission")
  programWideCouponCode     String?  @map("program_wide_coupon_code")
  hidePartnerLinks          Boolean  @default(false) @map("hide_partner_links")
  requireBusinessEmail      Boolean  @default(false) @map("require_business_email")
  enablePostbacks           Boolean  @default(false) @map("enable_postbacks")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  @@map("program_settings")
}

model PartnerGroup {
  id             String   @id @default(cuid())
  name           String
  description    String?
  commissionRate Float    @map("commission_rate")
  signupUrl      String?  @map("signup_url")
  isDefault      Boolean  @default(false) @map("is_default")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("partner_groups")
}

enum Role {
  ADMIN
  AFFILIATE
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ReferralStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ConversionType {
  SIGNUP
  PURCHASE
  TRIAL
  LEAD
}

enum ConversionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum PayoutMethod {
  PAYPAL
  BANK_TRANSFER
  STRIPE
  WISE
  BANK_CSV
  STRIPE_CONNECT
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum CommissionRuleType {
  PERCENTAGE
  FIXED
}

model EmailTemplate {
  id          String              @id @default(cuid())
  type        EmailTemplateType
  name        String
  subject     String
  body        String              @db.Text
  variables   Json                @default("[]")
  isActive    Boolean             @default(true) @map("is_active")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  emailLogs   EmailLog[]

  @@map("email_templates")
}

model EmailLog {
  id            String        @id @default(cuid())
  templateId    String        @map("template_id")
  recipientId   String        @map("recipient_id")
  recipientEmail String       @map("recipient_email")
  subject       String
  body          String        @db.Text
  status        EmailStatus   @default(PENDING)
  sentAt        DateTime?     @map("sent_at")
  error         String?
  metadata      Json          @default("{}")
  createdAt     DateTime      @default(now()) @map("created_at")
  template      EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([recipientId])
  @@index([templateId])
  @@map("email_logs")
}

model IntegrationSettings {
  id            String   @id @default(cuid())
  userId        String   @unique @map("user_id")
  provider      String   // 'tolt', 'rewardful', 'custom', etc.
  apiKey        String?  @map("api_key")
  publicKey     String?  @map("public_key")
  webhookUrl    String?  @map("webhook_url")
  trackingScript String? @map("tracking_script") @db.Text
  isActive      Boolean  @default(true) @map("is_active")
  config        Json     @default("{}")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("integration_settings")
}

enum EmailTemplateType {
  WELCOME_EMAIL
  FIRST_REFERRAL
  NEW_REFERRAL
  PARTNER_PAID
  PARTNER_INVITATION
  PARTNER_APPROVAL
  PARTNER_DECLINED
  COMMISSION_APPROVED
  PAYOUT_GENERATED
  REFERRAL_CONVERTED
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}
